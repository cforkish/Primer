<p>Find me in app/views/graph/tree.html.erb</p>
<!-- <iframe marginwidth="0" marginheight="0" scrolling="no"></iframe> -->
<object class="tree"></object>

<style>

.node circle {
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node {
  font: 10px sans-serif;
}

.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}

</style>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

var margin = {top: 80, right: 120, bottom: 80, left: 120},
    width = 960 - margin.right - margin.left,
    height = 800 - margin.top - margin.bottom;

var tree = d3.layout.tree()
    .size([width, height]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.x, height - d.y]; });

var svg = d3.select("object.tree").append("svg")
    .attr("display", "block")
    .attr("margin", "auto")
    .attr("preserveAspectRatio", "xMidYMin")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


var json = <%= raw(@mydata) %>

var nodes = tree.nodes(json),
    links = tree.links(nodes);

var link = svg.selectAll("path.link")
    .data(links)
  .enter().append("path")
    .attr("class", "link")
    .attr("d", diagonal);

var node = svg.selectAll("g.node")
    .data(nodes)
  .enter().append("g")
    .attr("class", "node")
    .attr("transform", function(d) { return "translate(" + d.x + "," + (height - d.y) + ")"; })

node.append("circle")
    .attr("r", 35);

node.append("foreignObject")
    .attr("x", -20)
    .attr("y", -20)
    .attr("width", 40)
    .attr("height", 40)
    .append("xhtml")
      .html(function(d) { return "<a href=\"" + d.url + "\" class=\"node-label\">" + d.name + "</a>"; });


d3.select(self.frameElement).style("height", height + "px");

</script>

<!-- old

<style>

.node {
  cursor: pointer;
}

.node circle {
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font: 10px sans-serif;
}

.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="application.js"></script>
<script>

var margin = {top: 20, right: 120, bottom: 20, left: 120},
    width = 960 - margin.right - margin.left,
    height = 800 - margin.top - margin.bottom;
    
var i = 0,
    duration = 750,
    root;

var tree = d3.layout.tree()
    .size([height, width]);


// tooltip used to display details
var tooltip = Tooltip("vis-tooltip", 230)

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

function collapse(d) {
  if (d.children) {
    d._children = d.children;
    d._children.forEach(collapse);
    d.children = null;
  }
}

var json = <%= raw(@mydata) %>  

root = json;
root.x0 = height / 2;
root.y0 = 0;

root.children.forEach(collapse);
update(root);

d3.select(self.frameElement).style("height", "800px");

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
      links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Update the nodes…
  var node = svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("mouseover", showDetails)
      .on("mouseout", hideDetails)
      .on("click", click);
      // .on("mouseup", showDetails)
      // .on("mouseout", hideDetails);

  nodeEnter.append("circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      });

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children on click.
function click(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}

// Mouseover tooltip function
function showDetails(d) {
    var content = '<p class="main">' + d.name + '</span></p>';
    // content += '<hr class="tooltip-hr">'
    // content += '<p class="main">Lessons: ' + d.artist + '</span></p>'
    tooltip.showTooltip(content,d3.event);

    // // higlight connected links
    // if link
    //   link.attr("stroke", (l) ->
    //     if l.source == d or l.target == d then "#555" else "#ddd"
    //   )
    //     .attr("stroke-opacity", (l) ->
    //       if l.source == d or l.target == d then 1.0 else 0.5
    //     )

    //   # link.each (l) ->
    //   #   if l.source == d or l.target == d
    //   #     d3.select(this).attr("stroke", "#555")

    // // highlight neighboring nodes
    // // watch out - don't mess with node if search is currently matching
    // node.style("stroke", (n) ->
    //   if (n.searched or neighboring(d, n)) then "#555" else strokeFor(n))
    //   .style("stroke-width", (n) ->
    //     if (n.searched or neighboring(d, n)) then 2.0 else 1.0)

    // # highlight the node being moused over
    // d3.select(this).style("stroke","black")
    //   .style("stroke-width", 2.0)
}

// Mouseout function
function hideDetails(d) {
    tooltip.hideTooltip()
    // # watch out - don't mess with node if search is currently matching
    // node.style("stroke", (n) -> if !n.searched then strokeFor(n) else "#555")
    //   .style("stroke-width", (n) -> if !n.searched then 1.0 else 2.0)
    // if link
    //   link.attr("stroke", "#ddd")
    //     .attr("stroke-opacity", 0.8)
}


</script> -->
